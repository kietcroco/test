'use strict';

const distance = (touchTrackA: Object, touchTrackB: Object, ofCurrent: Boolean) => {

	let xa, ya, xb, yb;
	if (ofCurrent) {
		xa = touchTrackA.currentPageX;
		ya = touchTrackA.currentPageY;
		xb = touchTrackB.currentPageX;
		yb = touchTrackB.currentPageY;
	} else {
		xa = touchTrackA.previousPageX;
		ya = touchTrackA.previousPageY;
		xb = touchTrackB.previousPageX;
		yb = touchTrackB.previousPageY;
	}
	return Math.sqrt(Math.pow(xa - xb, 2) + Math.pow(ya - yb, 2));
};

const maxDistance = (touchBank: Array, ofCurrent: Object) => {

	let max = 0;
	for (let i = 0; i < touchBank.length - 1; i++) {
		for (let j = i + 1; j < touchBank.length; j++) {
			let d = distance(touchBank[i], touchBank[j], ofCurrent);
			if (d > max) {
				max = d;
			}
		}
	}
	return max;
};

const pinchDistance = (touchHistory: Object, touchesChangedAfter: Number, ofCurrent: Boolean) => {

	let touchBank = touchHistory.touchBank;
	if (touchHistory.numberActiveTouches > 1) {
		let filteredTouchBank = touchBank.filter(touchTrack => {

			return touchTrack && touchTrack.currentTimeStamp >= touchesChangedAfter;
		});
		return maxDistance(filteredTouchBank, ofCurrent);
	}
};

const toDeg = (rad: Number) => {

	return rad * 180 / Math.PI;
};

const angle = (touchTrackA: Object, touchTrackB: Object, ofCurrent: Boolean) => {

	let xa, ya, xb, yb, deg;
	if (ofCurrent) {
		xa = touchTrackA.currentPageX;
		ya = touchTrackA.currentPageY;
		xb = touchTrackB.currentPageX;
		yb = touchTrackB.currentPageY;
	} else {
		xa = touchTrackA.previousPageX;
		ya = touchTrackA.previousPageY;
		xb = touchTrackB.previousPageX;
		yb = touchTrackB.previousPageY;
	}

	deg = toDeg(Math.atan2(yb - ya, xb - xa));

	if (deg < 0) {
		
		deg += 360;
	}
	if( deg >= 360 ) {

		deg -= 360;
	}
	return deg;
};

const maxAngleDistance = (touchBank: Array, ofCurrent: Object) => {

	let max = 0;
	for (let i = 0; i < touchBank.length - 1; i++) {
		for (let j = i + 1; j < touchBank.length; j++) {
			let d = angle(touchBank[i], touchBank[j], ofCurrent);
			if (d > max) {
				max = d;
			}
		}
	}
	return max;
};

const angleDistance = (touchHistory: Object, touchesChangedAfter: Number, ofCurrent: Boolean) => {

	let touchBank = touchHistory.touchBank;
	if (touchHistory.numberActiveTouches > 1) {

		let filteredTouchBank = touchBank.filter(touchTrack => {

			return touchTrack && touchTrack.currentTimeStamp >= touchesChangedAfter;
		});

		return maxAngleDistance(filteredTouchBank, ofCurrent);
	}
};

export {
	distance,
	maxDistance,
	pinchDistance,
	toDeg,
	angle,
	maxAngleDistance,
	angleDistance
};